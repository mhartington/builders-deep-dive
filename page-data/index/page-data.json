{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"fca82c84-fce6-5da7-81af-2000da83321f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = oceanicNext;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Deep dive into CLI Builders\")), mdx(\"h1\", null, \"So\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"h2\", null, \"Have you heard about Ionic!?\"), mdx(\"h2\", null, \"Good!\")), mdx(\"hr\", null), mdx(\"h2\", null, \"This is not about Ionic\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Deep dive into CLI Builders\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mike Hartington | Ionic, Angular GDE\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://twitter.com/mhartington\"\n  }), \"@mhartington\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://bit.ly/2Jx7xDO\"\n  }), \"https://bit.ly/2Jx7xDO\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"CLI Builders\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mysterious\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Behind the scenes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Simple principle\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Builders to me are the unsung hero of the CLI. if you ask a room of angular developers if they know anything about builders, chances are they probably will say no.\"), mdx(\"p\", null, \"However, we use builders every day without realizing it. They're the key part that makes the angular CLI functional, and also extensible.\"), mdx(\"p\", null, \"And they operate on simple principle, given a set of options, run a program against a workspace\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"$ ng build\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"$ ng build\\nBrowser builder\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"$ ng build\\nBrowser builder\\n$ ng serve\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"$ ng build\\nBrowser builder\\n$ ng serve\\nDev-server builder\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"$ ng build\\nBrowser builder\\n$ ng serve\\nDev-server builder\\n$ ng test\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"$ ng build\\nBrowser builder\\n$ ng serve\\nDev-server builder\\n$ ng test\\nKarma builder\\n\"))), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"Given a set of options, \", mdx(\"br\", null), \" run a function and return the results\\\"\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"showNumbers\",\n    \"showNumbers\": true\n  }), \"{\\n  \\\"projects\\\": {\\n    \\\"app\\\": {\\n      \\\"architect\\\": {\\n        \\\"build\\\": {\\n          \\\"builder\\\": \\\"@angular-devkit/build-angular:browser\\\",\\n          \\\"options\\\": {...},\\n          \\\"configurations\\\": {\\n            \\\"production\\\": {...}\\n          }\\n        },\\n        \\\"serve\\\": {},\\n        \\\"test\\\": {},\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:11 title=\\\"Our architect. High level settings\\\"\",\n    \"5:11\": true,\n    \"title\": \"\\\"Our\",\n    \"architect.\": true,\n    \"High\": true,\n    \"level\": true,\n    \"settings\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6 title=\\\"What builder gets called\\\"\",\n    \"title\": \"\\\"What\",\n    \"builder\": true,\n    \"gets\": true,\n    \"called\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 title=\\\"Our options that get passed\\\"\",\n    \"title\": \"\\\"Our\",\n    \"options\": true,\n    \"that\": true,\n    \"get\": true,\n    \"passed\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:10 title=\\\"Overrides for production\\\"\",\n    \"8:10\": true,\n    \"title\": \"\\\"Overrides\",\n    \"for\": true,\n    \"production\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Let's make a builder!\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Y Tho...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integrate external tools\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Customize existing systems\")), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Become a true 10X developer\"))), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"mkdir custom-builders\\ncd custom-builders\\nnpm init -y\\n\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"title=\\\"package.json\\\" showNumbers\",\n    \"title\": \"\\\"package.json\\\"\",\n    \"showNumbers\": true\n  }), \"{\\n  \\\"name\\\": \\\"@bionic/builders\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"builders\\\": \\\"./builders.json\\\",\\n  ....\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"title=\\\"builder.json\\\"\",\n    \"title\": \"\\\"builder.json\\\"\"\n  }), \"{\\n  \\\"builders\\\": {\\n    \\\"command-builder\\\": {\\n      \\\"implementation\\\": \\\"./builders/command-builder/index\\\",\\n      \\\"schema\\\": \\\"./builders/command-builder/schema.json\\\",\\n      \\\"description\\\": \\\"Run a shell command\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4 title=\\\"Our builder logic\\\"\",\n    \"title\": \"\\\"Our\",\n    \"builder\": true,\n    \"logic\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5 title=\\\"Our scheme, to validate options\\\"\",\n    \"title\": \"\\\"Our\",\n    \"scheme,\": true,\n    \"to\": true,\n    \"validate\": true,\n    \"options\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6 title=\\\"A description desciption\\\"\",\n    \"title\": \"\\\"A\",\n    \"description\": true,\n    \"desciption\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"1:17\",\n    \"1:17\": true\n  }), \"{\\n  \\\"name\\\": \\\"@bionic/builders\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"builders\\\": \\\"./builders.json\\\"\\n}\\n\\n{\\n  \\\"builders\\\": {\\n    \\\"command-builder\\\": {\\n      \\\"implementation\\\": \\\"./builders/command-builder/index\\\",\\n      \\\"schema\\\": \\\"./builders/command-builder/schema.json\\\",\\n      \\\"description\\\": \\\"Run a shell command\\\"\\n    }\\n  }\\n}\\n\\n\\\"builder\\\": \\\"@bionic/builders:command-builder\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[12:27],17[13:28]\",\n    \"2[12:27],17[13:28]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[12:27],9[6:20],17[13:28,30:44]\",\n    \"2[12:27],9[6:20],17[13:28,30:44]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[12:27],9[6:20],10,17[13:28,30:44]\",\n    \"2[12:27],9[6:20],10,17[13:28,30:44]\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"title=\\\"builders/command-builder/index\\\" showNumbers\",\n    \"title\": \"\\\"builders/command-builder/index\\\"\",\n    \"showNumbers\": true\n  }), \"export default createBuilder(commandBuilder);\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"export default createBuilder(commandBuilder);\\n\\nfunction commandBuilder(\\n    options: JsonObject, context: BuilderContext\\n): Promise<BuildEvent> {\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"export default createBuilder(commandBuilder);\\n\\nfunction commandBuilder(\\n    options: JsonObject, context: BuilderContext\\n): Promise<BuildEvent> {\\n  const process = childProcess.spawn(\\n    options.command, options.args\\n  );\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"export default createBuilder(commandBuilder);\\n\\nfunction commandBuilder(\\n    options: JsonObject, context: BuilderContext\\n): Promise<BuildEvent> {\\n  const process = childProcess.spawn(\\n    options.command, options.args\\n  );\\n  process.stdout.on('data', (data) => {\\n    context.logger.info(data.toString());\\n  });\\n  process.stderr.on('data', (data) => {\\n    context.logger.error(data.toString());\\n  });\\n  return new Promise(resolve => {\\n    process.on('close', code => {\\n      resolve({success: code === 0});\\n    });\\n  });\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:20\",\n    \"1:20\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(Video, {\n    src: \"command-builder-2.mov\",\n    mdxType: \"Video\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Something more complex?\"), mdx(\"h3\", null, \"New Webpack plugin\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\",\n    \"metastring\": \"title=\\\"./builders/extend-builder/index.ts\\\" showNumbers\",\n    \"title\": \"\\\"./builders/extend-builder/index.ts\\\"\",\n    \"showNumbers\": true\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n  const targetSpec = targetFromTargetString(\\n    options.browserTarget\\n  );\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Returns the target, builder, and config\\\" 7:9 subtitle=\\\"{ project:string, target:string, configuration:string }\\\"\",\n    \"title\": \"\\\"Returns\",\n    \"the\": true,\n    \"target,\": true,\n    \"builder,\": true,\n    \"and\": true,\n    \"config\\\"\": true,\n    \"7:9\": true,\n    \"subtitle\": \"\\\"{\",\n    \"project:string,\": true,\n    \"target:string,\": true,\n    \"configuration:string\": true,\n    \"}\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n  const targetSpec = targetFromTargetString(\\n    options.browserTarget\\n  );\\n\\n  return forkJoin(\\n    from(context.getTargetOptions(targetSpec)),\\n    from(context.getBuilderNameForTarget(targetSpec))\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Get the options listed in angular.json\\\" 12\",\n    \"title\": \"\\\"Get\",\n    \"the\": true,\n    \"options\": true,\n    \"listed\": true,\n    \"in\": true,\n    \"angular.json\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Get the builder name we want to run\\\" 13 subtitle=\\\"@angular-devkit/build-angular:browser\\\"\",\n    \"title\": \"\\\"Get\",\n    \"the\": true,\n    \"builder\": true,\n    \"name\": true,\n    \"we\": true,\n    \"want\": true,\n    \"to\": true,\n    \"run\\\"\": true,\n    \"subtitle\": \"\\\"@angular-devkit/build-angular:browser\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n  const targetSpec = targetFromTargetString(\\n    options.browserTarget\\n  );\\n\\n  return forkJoin(\\n    from(context.getTargetOptions(targetSpec)),\\n    from(context.getBuilderNameForTarget(targetSpec))\\n  ).pipe(\\n    concatMap(([buildOptions, buildName]) =>\\n      from(\\n        context.validateOptions(\\n          buildOptions,\\n          buildName\\n        )\\n      )\\n    ),\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Validates public options with internals\\\" 17:20\",\n    \"title\": \"\\\"Validates\",\n    \"public\": true,\n    \"options\": true,\n    \"with\": true,\n    \"internals\\\"\": true,\n    \"17:20\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n  const targetSpec = targetFromTargetString(\\n    options.browserTarget\\n  );\\n\\n  return forkJoin(\\n    from(context.getTargetOptions(targetSpec)),\\n    from(context.getBuilderNameForTarget(targetSpec))\\n  ).pipe(\\n    concatMap(([buildOptions, buildName]) =>\\n      from(\\n        context.validateOptions(\\n          buildOptions,\\n          buildName\\n        )\\n      )\\n    ),\\n    concatMap(finalOpts =>\\n      extendBuilder(executeBrowserBuilder)(\\n        finalOpts,\\n        context\\n      )\\n    )\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n  const targetSpec = targetFromTargetString(\\n    options.browserTarget\\n  );\\n\\n  return forkJoin(\\n    from(context.getTargetOptions(targetSpec)),\\n    from(context.getBuilderNameForTarget(targetSpec))\\n  ).pipe(\\n    concatMap(([buildOptions, buildName]) =>\\n      from(\\n        context.validateOptions(\\n          buildOptions,\\n          buildName\\n        )\\n      )\\n    ),\\n    concatMap(finalOpts =>\\n      extendBuilder(executeBrowserBuilder)(\\n        finalOpts,\\n        context\\n      )\\n    )\\n  );\\n}\\n\\nexport function extendBuilder(builder) {\\n  return (options: any, context: BuilderContext) => {\\n    return builder(options, context, {\\n      webpackConfiguration(config) {\\n        return config;\\n      }\\n    });\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"~=[,,_,,]:3\\\"\",\n    \"title\": \"\\\"~\"\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n  const targetSpec = targetFromTargetString(\\n    options.browserTarget\\n  );\\n\\n  return forkJoin(\\n    from(context.getTargetOptions(targetSpec)),\\n    from(context.getBuilderNameForTarget(targetSpec))\\n  ).pipe(\\n    concatMap(([buildOptions, buildName]) =>\\n      from(\\n        context.validateOptions(\\n          buildOptions,\\n          buildName\\n        )\\n      )\\n    ),\\n    concatMap(finalOpts =>\\n      extendBuilder(executeBrowserBuilder)(\\n        finalOpts,\\n        context\\n      )\\n    )\\n  );\\n}\\n\\nexport function extendBuilder(builder) {\\n  return (options: any, context: BuilderContext) => {\\n    return builder(options, context, {\\n      webpackConfiguration(config) {\\n        config.plugins.push(new NyanProgressPlugin());\\n        return config;\\n      }\\n    });\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:41\",\n    \"1:41\": true\n  }), \"export default createBuilder(extendExisitingBuilder);\\n\\nfunction extendExisitingBuilder(\\n  options: BuilderOptions,\\n  context: BuilderContext\\n): Observable<BuilderOutput> {\\n  const targetSpec = targetFromTargetString(\\n    options.browserTarget\\n  );\\n\\n  return forkJoin(\\n    from(context.getTargetOptions(targetSpec)),\\n    from(context.getBuilderNameForTarget(targetSpec))\\n  ).pipe(\\n    concatMap(([buildOptions, buildName]) =>\\n      from(\\n        context.validateOptions(\\n          buildOptions,\\n          buildName\\n        )\\n      )\\n    ),\\n    concatMap(finalOpts =>\\n      extendBuilder(executeBrowserBuilder)(\\n        finalOpts,\\n        context\\n      )\\n    )\\n  );\\n}\\n\\nexport function extendBuilder(builder) {\\n  return (options: any, context: BuilderContext) => {\\n    return builder(options, context, {\\n      webpackConfiguration(config) {\\n        config.plugins.push(new NyanProgressPlugin());\\n        return config;\\n      }\\n    });\\n  };\\n}\\n\"))), mdx(\"hr\", null), mdx(Video, {\n    src: \"extend-builder.mov\",\n    mdxType: \"Video\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"So, what have we learned\"), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For the most part, builders aren't complicated\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The real work is finding out what APIs you need\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mostly driven by the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@angular-devkit\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be a bit trial-and-error\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"~820 LOC, plus imports and utils\\\"  title=\\\"@angular-devkit/build-angular:browser\\\"\",\n    \"subtitle\": \"\\\"~820\",\n    \"LOC,\": true,\n    \"plus\": true,\n    \"imports\": true,\n    \"and\": true,\n    \"utils\\\"\": true,\n    \"\": true,\n    \"title\": \"\\\"@angular-devkit/build-angular:browser\\\"\"\n  }), \"export function buildWebpackBrowser(\\n  options: BrowserBuilderSchema,\\n  context: BuilderContext,\\n  transforms: {\\n    webpackConfiguration?: ExecutionTransformer<webpack.Configuration>;\\n    logging?: WebpackLoggingCallback;\\n    indexHtml?: IndexHtmlTransform;\\n  } = {},\\n): Observable<BrowserBuilderOutput> {\\n//...\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Builders can go from being quite simple, to rather complex depending on your needs.\"), mdx(\"p\", null, \"The default browser builder for Angular is great example of a complex builder. It pulls in many different tools, some webpack plugins, and makes heavy use of every API available.\")), mdx(\"hr\", null), mdx(\"p\", null, \"Plus there's type to follow!\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Some great example\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mgechev/cli-builders-demo\"\n  }), \"mgechev/cli-builders-demo\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/@angular-builders/custom-webpack\"\n  }), \"@angular-builders/custom-webpack\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/manfredsteyer/ngx-build-plus\"\n  }), \"Manfred's ngx-build-plus\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/angular-schule/angular-cli-ghpages\"\n  }), \"Angular Schule angular-cli-ghpages\"))), mdx(\"hr\", null), mdx(\"h1\", null, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"https://github.com/ionic-team/angular-toolkit\"\n  }), \"@ionic/angular-toolkit\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Evaluate\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integrate different workflows\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Various node scripts? Builders can help\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There is no one true way\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Thank you\"), mdx(\"br\", null), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://twitter.com/mhartington\"\n  }), \"@mhartington\")), mdx(\"br\", null), mdx(\"h4\", null, mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"</html>\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"fca82c84-fce6-5da7-81af-2000da83321f","slug":"/builders-deep-dive","title":"So"}}}